// Generated by CoffeeScript 1.6.1
(function() {
  var $, BOP, Backbone, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BOP = {};

  $ = require('jquery');

  _ = require('backbone/node_modules/underscore');

  Backbone = require('backbone');

  Backbone.$ = $;

  BOP.Backbone = Backbone;

  BOP.$ = $;

  BOP._ = _;

  BOP.BOPModel = (function(_super) {

    __extends(BOPModel, _super);

    function BOPModel() {
      return BOPModel.__super__.constructor.apply(this, arguments);
    }

    BOPModel.has = function(name, model, options) {
      var _base;
      if (options == null) {
        options = {};
      }
      options = _.defaults(options, {
        method: 'parse',
        model: model,
        name: name
      });
      (_base = this.prototype)._has || (_base._has = {});
      return this.prototype._has[name] = options;
    };

    BOPModel.prototype.has_relationship = function(attr, options) {
      return this.get_relationship(attr, options) && true;
    };

    BOPModel.prototype.get_relationship = function(attr, options) {
      var has_rel;
      if (options == null) {
        options = {};
      }
      has_rel = this._has && this._has[attr] && true;
      if (options.method) {
        has_rel = has_rel && options.method === this._has[attr].method;
      }
      if (!has_rel) {
        return void 0;
      }
      return this._has[attr];
    };

    BOPModel.prototype.get_relationship_model = function(attr) {
      return this.get_relationship(attr).model;
    };

    BOPModel.prototype.get_relationship_method = function(attr) {
      return this.get_relationship(attr).method;
    };

    BOPModel.prototype.get_relationship_reverse = function(attr) {
      return this._has[attr].reverse;
    };

    BOPModel.prototype.has_relationship_reverse = function(attr) {
      return !!this._has[attr].reverse;
    };

    BOPModel.prototype.get_relationships = function(options) {
      var key, rel, rels, val, _ref;
      if (options == null) {
        options = {};
      }
      if (!this._has) {
        return [];
      }
      rels = [];
      _ref = this._has;
      for (key in _ref) {
        val = _ref[key];
        if ((rel = this.get_relationship(key, options))) {
          rels.push(rel);
        }
      }
      return rels;
    };

    BOPModel.prototype.set_model_values = function(m, attr) {
      if (m instanceof Backbone.Model) {
        if (this.has_relationship_reverse(attr)) {
          m.set(this.get_relationship_reverse(attr), this);
        }
      } else if (m instanceof Backbone.Collection) {
        m[this.get_relationship_reverse(attr)] = this;
      }
      m._parent = this;
      return m._field_name = attr;
    };

    BOPModel.prototype.get = function(attr, options) {
      var data, m, model_class;
      data = BOPModel.__super__.get.call(this, attr, options);
      if (data) {
        return $.when(data);
      }
      if (this.has_relationship(attr, {
        method: 'fetch'
      })) {
        model_class = this.get_relationship_model(attr);
        m = new model_class();
        this.set_model_values(m, attr);
        this.set(attr, m);
        return $.when(m.fetch(options)).then(function(res) {
          return m;
        });
      }
      return $.when(void 0);
    };

    BOPModel.prototype.parse = function(data, options) {
      var m, parsed, val, _i, _len, _ref;
      parsed = BOPModel.__super__.parse.call(this, data, options);
      parsed = _.extend({}, parsed);
      _ref = this.get_relationships();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        val = _ref[_i];
        if (parsed[val.name]) {
          m = new val.model(parsed[val.name], {
            parse: true
          });
          this.set_model_values(m, val.name);
          parsed[val.name] = m;
        }
      }
      return parsed;
    };

    BOPModel.prototype.toJSON = function(options) {
      var json, rel, _i, _j, _len, _len1, _ref, _ref1;
      json = BOPModel.__super__.toJSON.apply(this, arguments);
      _ref = this.get_relationships();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rel = _ref[_i];
        delete json[rel.name];
      }
      _ref1 = this.get_relationships({
        method: 'parse'
      });
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        rel = _ref1[_j];
        this.get(rel.name).done(function(x) {
          if (x) {
            return json[rel.name] = x.toJSON(options);
          }
        });
      }
      return json;
    };

    return BOPModel;

  })(Backbone.Model);

  if (typeof define !== 'undefined' && define.amd) {
    define([], function() {
      return BOP;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = BOP;
  }

}).call(this);
